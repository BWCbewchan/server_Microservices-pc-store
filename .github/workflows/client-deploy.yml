name: Build and Deploy Client

on:
  push:
    branches:
      - main
      - ci/ci
    paths:
      - 'client/**'
      - '.github/workflows/client-deploy.yml'
  pull_request:
    branches:
      - main
      - ci/ci
    paths:
      - 'client/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: |
          cd client
          npm ci
      
      - name: Build client
        run: |
          cd client
          npm run build
        env:
          VITE_APP_API_GATEWAY_URL: ${{ secrets.API_GATEWAY_URL || 'http://localhost:3000' }}
      
      - name: Run linting
        run: |
          cd client
          npm run lint || echo "Linting issues found, but continuing build"
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            client/dist
            client/node_modules/.vite
          key: ${{ runner.os }}-vite-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vite-build-
      
      - name: Add build summary
        run: |
          echo "## Client Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          
          echo "### Environment" >> $GITHUB_STEP_SUMMARY
          echo "* Node.js version: $(node -v)" >> $GITHUB_STEP_SUMMARY
          echo "* NPM version: $(npm -v)" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Stats" >> $GITHUB_STEP_SUMMARY
          cd client
          echo "* Build size: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "* Number of files: $(find dist -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code again
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Build directly in the deployment step to ensure we have the dist directory
      - name: Install dependencies and build
        run: |
          cd client
          npm ci
          npm run build
        env:
          VITE_APP_API_GATEWAY_URL: ${{ secrets.API_GATEWAY_URL || 'http://localhost:3000' }}
      
      # Verify build output exists
      - name: Verify build output
        run: |
          if [ -d "client/dist" ]; then
            echo "✅ Build directory exists"
            ls -la client/dist
          else
            echo "❌ Build directory is missing! Troubleshooting info:"
            echo "Current directory:"
            pwd
            echo "Directory contents:"
            ls -la
            echo "Client directory contents:"
            ls -la client
            exit 1
          fi
      
      # Deploy to static hosting and capture the domain URL
      - name: Deploy to static hosting
        id: deploy
        run: |
          echo "Deploying to static hosting..."
          if [ -n "$NETLIFY_AUTH_TOKEN" ]; then
            npm install -g netlify-cli
            
            # Deploy and capture output
            DEPLOY_OUTPUT=$(netlify deploy --dir=client/dist --prod --json)
            echo "Deployment output: $DEPLOY_OUTPUT"
            
            # Extract URL from JSON output
            DEPLOY_URL=$(echo $DEPLOY_OUTPUT | grep -o '"url":"[^"]*"' | sed 's/"url":"//g' | sed 's/"//g')
            SITE_NAME=$(echo $DEPLOY_URL | sed 's/https:\/\///g' | sed 's/.netlify.app//g')
            
            # Set outputs for use in other steps
            echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "site_name=$SITE_NAME" >> $GITHUB_OUTPUT
            
            echo "✅ Deployed successfully to: $DEPLOY_URL"
            echo "✅ Your Netlify site name is: $SITE_NAME"
          else
            echo "Skipping actual deployment - no deployment token provided"
            echo "In a real scenario, this would deploy to your hosting service"
            echo "Build directory contents:"
            ls -la client/dist || echo "⚠️ Warning: client/dist not found"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      
      - name: Add deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          if [ -n "$NETLIFY_AUTH_TOKEN" ]; then
            echo "✅ Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
            
            # Display deployment URLs if available
            if [ -n "${{ steps.deploy.outputs.deploy_url }}" ]; then
              echo "🔗 **Deployment URL:** [${{ steps.deploy.outputs.deploy_url }}](${{ steps.deploy.outputs.deploy_url }})" >> $GITHUB_STEP_SUMMARY
              echo "🌐 **Netlify Site Name:** ${{ steps.deploy.outputs.site_name }}.netlify.app" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Simulated deployment only (no deployment tokens provided)" >> $GITHUB_STEP_SUMMARY
            echo "To enable actual deployment, add NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID secrets" >> $GITHUB_STEP_SUMMARY
          fi
          echo "📅 Deployment date: $(date)" >> $GITHUB_STEP_SUMMARY
