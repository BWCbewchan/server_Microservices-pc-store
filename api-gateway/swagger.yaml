openapi: 3.0.0
info:
  title: PC Store API Gateway
  description: Centralized API Gateway for PC Store Microservices
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local Development

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        brand:
          type: string
        images:
          type: array
          items:
            type: string
        specifications:
          type: object
          properties:
            cpu:
              type: string
            ram:
              type: string
            storage:
              type: string
            gpu:
              type: string
            screen:
              type: string
        stock:
          type: number
        rating:
          type: number
        reviewCount:
          type: number

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time

    Cart:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
              price:
                type: number
        totalAmount:
          type: number

    Order:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
              price:
                type: number
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        totalAmount:
          type: number
        shippingAddress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string

    Review:
      type: object
      properties:
        _id:
          type: string
        productId:
          type: string
        userId:
          type: string
        rating:
          type: number
        comment:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  # Product Service (4004)
  /api/products:
    get:
      tags: [Products]
      summary: Get all products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: brand
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: number
                      totalPages:
                        type: number
                      total:
                        type: number

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /api/products/search:
    get:
      tags: [Products]
      summary: Search products
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  # Auth Service (3004)
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: User registered successfully

  /api/auth/login:
    post:
      tags: [Auth]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  # Cart Service
  /api/cart:
    get:
      tags: [Cart]
      summary: Get user's cart
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    post:
      tags: [Cart]
      summary: Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: number
      responses:
        200:
          description: Item added successfully

  # Order Service (3002)
  /api/orders:
    post:
      tags: [Orders]
      summary: Create new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: number
                shippingAddress:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
      responses:
        201:
          description: Order created successfully

    get:
      tags: [Orders]
      summary: Get user's orders
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  # Review Service (3007)
  /api/reviews/{productId}:
    get:
      tags: [Reviews]
      summary: Get product reviews
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

    post:
      tags: [Reviews]
      summary: Add product review
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                comment:
                  type: string
      responses:
        201:
          description: Review added successfully

  # Inventory Service (3006)
  /api/inventory/{productId}:
    get:
      tags: [Inventory]
      summary: Check product stock
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  stock:
                    type: number

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # Payment Service
  /api/payments/process:
    post:
      tags: [Payments]
      summary: Process payment for order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                amount:
                  type: number
                paymentMethod:
                  type: string
                  enum: [credit_card, paypal]
      responses:
        200:
          description: Payment processed successfully

  # Shipping Service
  /api/shipping/calculate:
    post:
      tags: [Shipping]
      summary: Calculate shipping cost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: object
                  properties:
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                weight:
                  type: number
      responses:
        200:
          description: Shipping cost calculated

  # Cart Additional Endpoints
  /api/cart/{productId}:
    delete:
      tags: [Cart]
      summary: Remove item from cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Item removed successfully

  /api/cart/quantity:
    put:
      tags: [Cart]
      summary: Update item quantity
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: number
      responses:
        200:
          description: Quantity updated successfully

  # User Profile
  /api/user/profile:
    get:
      tags: [User]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
    
    put:
      tags: [User]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                address:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
      responses:
        200:
          description: Profile updated successfully