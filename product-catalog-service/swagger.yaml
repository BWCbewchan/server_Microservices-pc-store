openapi: 3.0.0
info:
  title: PC Store Product Catalog Service API
  description: API for managing PC components and laptop products
  version: 1.0.0
  contact:
    name: PC Store Support
    email: support@pcstore.com

servers:
  - url: http://localhost:4004/
    description: Development server just for testing purpose
  - url: http://localhost:4004/api/products
    description: Development server api gatewate
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "ASUS ROG Strix G15"
        description:
          type: string
          example: "Gaming laptop with RTX 3060"
        price:
          type: number
          format: float
          example: 1500.99
        category:
          type: string
          example: "Laptop"
        brand:
          type: string
          example: "ASUS"
        color:
          type: array
          items:
            type: string
          example: ["Black", "Gray"]
        stock:
          type: integer
          example: 10
        rating:
          type: number
          example: 4.5
        images:
          type: array
          items:
            type: string
          example: ["image1.jpg", "image2.jpg"]

    ProductInput:
      type: object
      required:
        - name
        - description
        - price
        - category
        - brand
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        brand:
          type: string
        color:
          type: array
          items:
            type: string
        stock:
          type: integer

paths:
  /products:
    get:
      tags: [Products]
      summary: Get all products with sorting
      parameters:
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, newest]
          description: |
            Sorting options:
            - price_asc: Sort by price ascending
            - price_desc: Sort by price descending
            - newest: Sort by creation date (default)
      responses:
        200:
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        400:
          description: Invalid sorting parameter
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

    post:
      tags: [Products]
      summary: Create new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  product:
                    $ref: '#/components/schemas/Product'
        400:
          description: Invalid input data
        401:
          description: Unauthorized - Missing or invalid token

  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found

    put:
      tags: [Products]
      summary: Update product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        200:
          description: Product updated
        404:
          description: Product not found

    delete:
      tags: [Products]
      summary: Delete product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product deleted
        404:
          description: Product not found

  /products/category/{category}:
    get:
      tags: [Filters]
      summary: Get products by category
      parameters:
        - in: path
          name: category
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of products
        404:
          description: No products found

  /products/brand/{brand}:
    get:
      tags: [Filters]
      summary: Get products by brand
      parameters:
        - in: path
          name: brand
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of products
        404:
          description: No products found

  /products/new:
    get:
      tags: [Filters]
      summary: Get new arrivals
      responses:
        200:
          description: List of new products

  /products/filter:
    get:
      tags: [Filters]
      summary: Filter products
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: priceRange
          schema:
            type: string
            pattern: "^\\d+-\\d+$"
            example: "100-500"
      responses:
        200:
          description: Filtered products
        400:
          description: Invalid filter parameters

tags:
  - name: Products
    description: Product management endpoints
  - name: Filters
    description: Product filtering endpoints