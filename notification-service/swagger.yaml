openapi: 3.0.0
info:
  title: PC Store Notification Service API
  description: |
    ## Real-time Notification System
    Microservice responsible for:
    - User notifications management
    - Real-time updates via WebSocket
    - Notification history
    - Multi-channel delivery (web, mobile, email)
  version: 1.0.0
  contact:
    name: PC Store Support
    email: support@pcstore.com

servers:
  - url: http://localhost:3005
    description: Development server

paths:
  /notifications:
    get:
      tags: [Notifications]
      summary: Get user notifications
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Notifications]
      summary: Create new notification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreate'
      responses:
        201:
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        400:
          $ref: '#/components/responses/BadRequest'

  /notifications/{id}:
    patch:
      tags: [Notifications]
      summary: Update notification status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [read, archived]
      responses:
        200:
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        404:
          $ref: '#/components/responses/NotFound'

  /notifications/ws:
    get:
      tags: [WebSocket]
      summary: WebSocket connection for real-time notifications
      description: |
        Establishes WebSocket connection using Socket.IO protocol
        Events:
          - notification:new (new notification)
          - notification:update (status update)
      responses:
        101:
          description: Switching Protocols

components:
  schemas:
    Notification:
      type: object
      properties:
        id:
          type: string
          example: "65a9b1f0a44b1f34b1a12345"
        userId:
          type: string
          example: "65a9b1f0a44b1f34b1a12345"
        title:
          type: string
          example: "Order Shipped"
        message:
          type: string
          example: "Your order #12345 has been shipped"
        type:
          type: string
          enum: [order, promotion, system, support]
        status:
          type: string
          enum: [unread, read, archived]
        orderId:
          type: string
          example: "65a9b1f0a44b1f34b1a12345"
        createdAt:
          type: string
          format: date-time

    NotificationCreate:
      type: object
      required:
        - userId
        - title
        - message
        - type
      properties:
        userId:
          type: string
        title:
          type: string
          maxLength: 120
        message:
          type: string
          maxLength: 500
        type:
          type: string
          enum: [order, promotion, system, support]
        orderId:
          type: string
        platform:
          type: string
          enum: [web, mobile, email, sms]

  responses:
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'  # Changed from Error to ErrorResponse
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'   # Changed from Error to ErrorResponse
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'    # Changed from Error to ErrorResponse

  schemas:
    ErrorResponse:  # Renamed from Error to match actual schema
      type: object
      properties:
        success:
          type: boolean
          example: false
        errorCode:
          type: string
          example: "INVALID_TOKEN"
        message:
          type: string
          example: "Authentication failed"
        details:
          type: string
          example: "JWT token expired"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "NOTIFICATION_NOT_FOUND"
        message:
          type: string
          example: "Notification not found with given ID"

tags:
  - name: Notifications
    description: Notification management
  - name: WebSocket
    description: Real-time communication