openapi: 3.0.0
info:
  title: Product Service API
  description: Product Management API
  version: 1.0.0
servers:
  - url: http://localhost:4004
    description: for server local
  - url: https://product-services-8x46.onrender.com
    description: for server htttps

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: The auto-generated id of the product
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: The description of the product
        price:
          type: number
          description: The price of the product
        category:
          type: string
          description: The category of the product
        brand:
          type: string
          description: The brand of the product
        images:
          type: array
          items:
            type: string
          description: Array of product image URLs
        specifications:
          type: object
          properties:
            cpu:
              type: string
            ram:
              type: string
            storage:
              type: string
            gpu:
              type: string
            screen:
              type: string
            battery:
              type: string
            weight:
              type: string
            dimensions:
              type: string
        stock:
          type: number
          description: Available stock quantity
        rating:
          type: number
          description: Average product rating
        reviewCount:
          type: number
          description: Number of reviews
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - price
        - category
        - brand

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: brand
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc, rating_desc]
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: number
                      totalPages:
                        type: number
                      total:
                        type: number
                      limit:
                        type: number

    post:
      tags:
        - Products
      summary: Create new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                description:
                  type: string
                category:
                  type: string
                brand:
                  type: string
                specifications:
                  type: object
                  properties:
                    cpu:
                      type: string
                    ram:
                      type: string
                    storage:
                      type: string
                    gpu:
                      type: string
                    screen:
                      type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                stock:
                  type: number
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid input
        401:
          description: Unauthorized

  /products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The product ID
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found

    put:
      summary: Update a product
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                description:
                  type: string
                category:
                  type: string
                brand:
                  type: string
                specifications:
                  type: object
                  properties:
                    cpu:
                      type: string
                    ram:
                      type: string
                    storage:
                      type: string
                    gpu:
                      type: string
                    screen:
                      type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                stock:
                  type: number
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid input
        401:
          description: Unauthorized
        404:
          description: Product not found

    delete:
      summary: Delete a product
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The product ID
      responses:
        200:
          description: Product deleted successfully
        401:
          description: Unauthorized
        404:
          description: Product not found

  /products/search:
    get:
      summary: Search products
      tags:
        - Products
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
          description: Search query
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: number
                      totalPages:
                        type: number
                      total:
                        type: number
        400:
          description: Invalid search query

  /products/category/{category}:
    get:
      summary: Get products by category
      tags:
        - Products
      parameters:
        - in: path
          name: category
          required: true
          schema:
            type: string
          description: Category name
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Products in category
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: number
                      totalPages:
                        type: number
                      total:
                        type: number

  /products/brand/{brand}:
    get:
      summary: Get products by brand
      tags:
        - Products
      parameters:
        - in: path
          name: brand
          required: true
          schema:
            type: string
          description: Brand name
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Products by brand
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: number
                      totalPages:
                        type: number
                      total:
                        type: number

  /products/filters:
    get:
      summary: Get filtered products
      tags:
        - Products
      parameters:
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: brand
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc, rating_desc]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Filtered products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: number
                      totalPages:
                        type: number
                      total:
                        type: number